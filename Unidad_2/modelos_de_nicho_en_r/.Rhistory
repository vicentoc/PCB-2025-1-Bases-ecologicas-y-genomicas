species_9_table
# Download data from databases
library(rgbif)
library(scrubr)
library(maps)
species_gbif <- c("Amblycercus holosericeus",
"Attila spadiceus",
"Automolus ochrolaemus",
"Basileuterus culicivorus",
"Cardinalis cardinalis"
# "Cercomacroides tyrannina",
# "Chlorophanes spiza",
#  "Coereba flaveola"
)
vector_names <- c()
species_refence_number  <- c()
for (i in seq_along(species_gbif)) {
vector_nam <- paste0("species_", i)
vector_names <- c(vector_names, vector_nam)
species_reference_number <- c(species_reference_number ,c(paste(vector_nam, species_gbif[i])))
}
species_refence_number  <- c()
for (i in seq_along(species_gbif)) {
vector_nam <- paste0("species_", i)
vector_names <- c(vector_names, vector_nam)
species_reference_number <- c(species_reference_number ,c(paste(vector_nam, species_gbif[i])))
}
species_reference_number
species_gbif <- c("Amblycercus holosericeus",
"Attila spadiceus",
"Automolus ochrolaemus",
"Basileuterus culicivorus",
"Cardinalis cardinalis"
# "Cercomacroides tyrannina",
# "Chlorophanes spiza",
#  "Coereba flaveola"
)
vector_names <- c()
species_refence_number  <- c()
for (i in seq_along(species_gbif)) {
vector_nam <- paste0("species_", i)
vector_names <- c(vector_names, vector_nam)
species_reference_number <- c(species_reference_number ,c(paste(vector_nam, species_gbif[i])))
}
vector_nam <- paste0("species_", i)
vector_names <- c(vector_names, vector_nam)
species_reference_number <- c(species_reference_number ,c(paste(vector_nam, species_gbif[i])))
species_reference_number
c(paste(vector_nam, species_gbif[i])
)
vector_names
species_reference_number
for (i in seq_along(species_gbif)) {
vector_nam <- paste0("species_", i)
vector_names <- c(vector_names, vector_nam)
species_reference_number <- c(species_reference_number ,c(paste(vector_nam, species_gbif[i])))
}
species_reference_number  <- c()
for (i in seq_along(species_gbif)) {
vector_nam <- paste0("species_", i)
vector_names <- c(vector_names, vector_nam)
species_reference_number <- c(species_reference_number ,c(paste(vector_nam, species_gbif[i])))
}
Check Objects
vector_names
species_refence_number
species_reference_number
# download GBIF occurrence data for these species; this may take a long time if there are many data points!
for (i in seq_along(species_gbif)) {
gbif_data <- occ_data(scientificName = species_gbif[i], hasCoordinate = TRUE, limit = 10000)  # decrease the 'limit' if you just want to see how many records there are without waiting all the time that it will take to download the whole dataset
assign(vector_names[i], gbif_data)
print(paste0(i))
}
#Objects
vector_names[1]
species_1
for (i in seq_along(vector_names)) {
get_gbif <- get(vector_names[i])
coords <- get_gbif$data[ , c("decimalLongitude", "decimalLatitude", "year")]
myspecies_coords_list <- data.frame(species = species_gbif[i], coords)
#lapply(myspecies_coords_list, head)
# collapse the list into a data frame:
myspecies_coords <- as.data.frame(myspecies_coords_list)
assign(paste0(vector_names[i],"_table") , myspecies_coords)
}
species_2
species_3
#Objects
vector_names[3]
species_reference_number
vector_names
vector_names <- c()
species_reference_number  <- c()
for (i in seq_along(species_gbif)) {
vector_nam <- paste0("species_", i)
vector_names <- c(vector_names, vector_nam)
species_reference_number <- c(species_reference_number ,c(paste(vector_nam, species_gbif[i])))
}
vector_names
# download GBIF occurrence data for these species; this may take a long time if there are many data points!
for (i in seq_along(species_gbif)) {
gbif_data <- occ_data(scientificName = species_gbif[i], hasCoordinate = TRUE, limit = 10000)  # decrease the 'limit' if you just want to see how many records there are without waiting all the time that it will take to download the whole dataset
assign(vector_names[i], gbif_data)
print(paste0(i))
}
#Objects
vector_names[3]
species_3
for (i in seq_along(vector_names)) {
get_gbif <- get(vector_names[i])
coords <- get_gbif$data[ , c("decimalLongitude", "decimalLatitude", "year")]
myspecies_coords_list <- data.frame(species = species_gbif[i], coords)
#lapply(myspecies_coords_list, head)
# collapse the list into a data frame:
myspecies_coords <- as.data.frame(myspecies_coords_list)
assign(paste0(vector_names[i],"_table") , myspecies_coords)
}
# Names
species_69_table
species_39_table
species_9_table
# Names
species_6_table
# Names
species_5_table
write.csv(species_5_table,  file = r"esults/species_5.csv")
write.table(species_5_table,  file = "results/species_5.csv", sep=",")
psilo<-read.csv("results/species_5.csv", head=T, sep=",")
cardi_df<- as.data.frame (cardi)
cardi<-read.csv("results/species_5.csv", head=T, sep=",")
cardi_df<- as.data.frame (cardi)
cardi_db<-select(cardi_df, verbatimScientificName, decimalLatitude,	decimalLongitude, rightsHolder, ownerInstitutionCode, basisOfRecord, occurrenceRemarks, georeferenceVerificationStatus, georeferenceSources, issue, verbatimLocality, year)
cardi_df
cardi_db<-select(cardi_df, species, decimalLatitude,	decimalLongitude, year)
cardi_db<-subset(cardi_db, year>= 1950)
cardi_db_sub<-subset(cardi_db, year>= 1950)
cardi_db_sub
shapes_names <- c("tropical_coniferous_forest",
"temperate_coniferous_forest",
"yp_dryforest",
"montane_grassland_sa",
"temperate_mixed_forest_2",
"moistforest_ca2", #sa
"moistforest_antillas",
"moistforest_yp",
"moistforest_ca1",
"dryforest_ca",
"dryforest_sa",
"dryforest_antillas")
for (i in seq_along(shapes_names)) {
shape_ecos <- readOGR(dsn=path.expand("shapes_figura/"),
layer=paste0(shapes_names[i]))
assign(paste0(shapes_names[i]), shape_ecos)
print(paste0(shapes_names[i]))
}
library(rgdal)
library(raster)
getwd()
setwd("C:\\Users\\vicen\\OneDrive\\Escritorio\\pcb_curso_2025-1_bases_ecologicas_y_genomicas\\PCB-2025-1-Bases-ecologicas-y-genomicas\\Unidad_2\\modelos_de_nicho_en_r\\")
shapes_names <- c("tropical_coniferous_forest",
"temperate_coniferous_forest",
"yp_dryforest",
"montane_grassland_sa",
"temperate_mixed_forest_2",
"moistforest_ca2", #sa
"moistforest_antillas",
"moistforest_yp",
"moistforest_ca1",
"dryforest_ca",
"dryforest_sa",
"dryforest_antillas")
for (i in seq_along(shapes_names)) {
shape_ecos <- readOGR(dsn=path.expand("shapes_figura/"),
layer=paste0(shapes_names[i]))
assign(paste0(shapes_names[i]), shape_ecos)
print(paste0(shapes_names[i]))
}
# stack each
pres.stack.ecos_list <-  pres.stack.ecos
# stack each
pres.stack.ecos_list <-  pres.stack.ecos
# stack each
for (i in seq_along(shapes_names)) {
for (j in seq_along(1:6)) {
shape_get <- get(shapes_names[i])
pres.stack.cut.ecos <- crop(wlclim_stack[[j]], shape_get)
pres.stack.cut.ecos_mask <- mask(pres.stack.cut.ecos, shape_get)
proj4string(pres.stack.cut.ecos_mask) <- CRS.new
if (j == 1) {
add_layer <- stack()
add_layer <- addLayer(add_layer, pres.stack.cut.ecos_mask)
} else {
add_layer <- addLayer(add_layer, pres.stack.cut.ecos_mask)
}
if (j == 6) {
assign(paste0(shapes_names[i], "_stack"), add_layer)
print(paste("chido", i))
} else {
print("chale")
}
}}
readRDS("wlclim_bios")
readRDS("wlclim_bios.RDS")
wlclim_bios
#Load RDS with bioclimatic information
wlclim_bios <- readRDS("wlclim_bios.RDS")
# stack each
for (i in seq_along(shapes_names)) {
for (j in seq_along(1:6)) {
shape_get <- get(shapes_names[i])
pres.stack.cut.ecos <- crop(wlclim_stack[[j]], shape_get)
pres.stack.cut.ecos_mask <- mask(pres.stack.cut.ecos, shape_get)
proj4string(pres.stack.cut.ecos_mask) <- CRS.new
if (j == 1) {
add_layer <- stack()
add_layer <- addLayer(add_layer, pres.stack.cut.ecos_mask)
} else {
add_layer <- addLayer(add_layer, pres.stack.cut.ecos_mask)
}
if (j == 6) {
assign(paste0(shapes_names[i], "_stack"), add_layer)
print(paste("chido", i))
} else {
print("chale")
}
}}
#Load libraries
library(rgdal)
library(raster)
# stack each
for (i in seq_along(shapes_names)) {
for (j in seq_along(1:6)) {
shape_get <- get(shapes_names[i])
pres.stack.cut.ecos <- crop(wlclim_stack[[j]], shape_get)
pres.stack.cut.ecos_mask <- mask(pres.stack.cut.ecos, shape_get)
proj4string(pres.stack.cut.ecos_mask) <- CRS.new
if (j == 1) {
add_layer <- stack()
add_layer <- addLayer(add_layer, pres.stack.cut.ecos_mask)
} else {
add_layer <- addLayer(add_layer, pres.stack.cut.ecos_mask)
}
if (j == 6) {
assign(paste0(shapes_names[i], "_stack"), add_layer)
print(paste("chido", i))
} else {
print("chale")
}
}}
#Load RDS with bioclimatic information
wlclim_stack <- readRDS("wlclim_bios.RDS")
# stack each
for (i in seq_along(shapes_names)) {
for (j in seq_along(1:6)) {
shape_get <- get(shapes_names[i])
pres.stack.cut.ecos <- crop(wlclim_stack[[j]], shape_get)
pres.stack.cut.ecos_mask <- mask(pres.stack.cut.ecos, shape_get)
proj4string(pres.stack.cut.ecos_mask) <- CRS.new
if (j == 1) {
add_layer <- stack()
add_layer <- addLayer(add_layer, pres.stack.cut.ecos_mask)
} else {
add_layer <- addLayer(add_layer, pres.stack.cut.ecos_mask)
}
if (j == 6) {
assign(paste0(shapes_names[i], "_stack"), add_layer)
print(paste("chido", i))
} else {
print("chale")
}
}}
wlclim_stack
wlclim_stack <- stack(wlclim_bios)
wlclim_bios
#Load RDS with bioclimatic information
wlclim_bios <- readRDS("wlclim_bios.RDS")
wlclim_stack <- stack(wlclim_bios)
wlclim_stack
saveRDS(wlclim_stack, "wlclim_bios.RDS")
#Load RDS with bioclimatic information
wlclim_stack <- readRDS("wlclim_bios.RDS")
wlclim_stack
#Load RDS with bioclimatic information
wlclim_stack <- readRDS("wlclim_bios.RDS")
# stack each
for (i in seq_along(shapes_names)) {
for (j in seq_along(1:6)) {
shape_get <- get(shapes_names[i])
pres.stack.cut.ecos <- crop(wlclim_stack[[j]], shape_get)
pres.stack.cut.ecos_mask <- mask(pres.stack.cut.ecos, shape_get)
proj4string(pres.stack.cut.ecos_mask) <- CRS.new
if (j == 1) {
add_layer <- stack()
add_layer <- addLayer(add_layer, pres.stack.cut.ecos_mask)
} else {
add_layer <- addLayer(add_layer, pres.stack.cut.ecos_mask)
}
if (j == 6) {
assign(paste0(shapes_names[i], "_stack"), add_layer)
print(paste("chido", i))
} else {
print("chale")
}
}}
# Load libraries
library(rgdal)
library(raster)
setwd ("C:\\Users\\vicen\\OneDrive\\Escritorio\\pcb_curso_2025-1_bases_ecologicas_y_genomicas\\PCB-2025-1-Bases-ecologicas-y-genomicas\\Unidad_2\\modelos_de_nicho_en_r")
shapes_names <- c("tropical_coniferous_forest",
"temperate_coniferous_forest",
"yp_dryforest",
"montane_grassland_sa",
"temperate_mixed_forest_2",
"moistforest_ca2", #sa
"moistforest_antillas",
"moistforest_yp",
"moistforest_ca1",
"dryforest_ca",
"dryforest_sa",
"dryforest_antillas")
for (i in seq_along(shapes_names)) {
shape_ecos <- readOGR(dsn=path.expand("shapes_figura/"),
layer=paste0(shapes_names[i]))
plot(shape_ecos)
assign(paste0(shapes_names[i]), shape_ecos)
print(paste0(shapes_names[i]))
}
wlclim_bios <- readRDS("wlclim_bios.RDS")
#
wlclim_stack <-raster::stack(wlclim_bios[c(13,15,16,5,6,10)])
wlclim_bios
#
wlclim_stack <-raster::stack(wlclim_bios[c(13,15,16,5,6,10)])
#
wlclim_stack <-raster::subset(wlclim_bios, c(13,15,16,5,6,10))
wlclim_stack
#
wlclim_stack <-raster::subset(wlclim_bios, c(5,6,10, 13,15,16))
wlclim_stack
wlclim_bios
#
wlclim_stack <-raster::subset(wlclim_bios, c("bio5",6,10, 13,15,16))
wlclim_stack
#
wlclim_stack <-raster::subset(wlclim_bios, c("bio5", "bio6","bio10","bio13","bio15","bio16"))
wlclim_stack
# NOTA Checar los objetos es una buena práctica!
wlclim_stack
# Make an stack for each biome
CRS.new<-CRS("+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0")
for (i in seq_along(shapes_names)) {
for (j in seq_along(1:6)) {
shape_get <- get(shapes_names[i])
pres.stack.cut.ecos <- crop(wlclim_stack[[j]], shape_get)
pres.stack.cut.ecos_mask <- mask(pres.stack.cut.ecos, shape_get)
proj4string(pres.stack.cut.ecos_mask) <- CRS.new
if (j == 1) {
add_layer <- stack()
add_layer <- addLayer(add_layer, pres.stack.cut.ecos_mask)
} else {
add_layer <- addLayer(add_layer, pres.stack.cut.ecos_mask)
}
if (j == 6) {
assign(paste0(shapes_names[i], "_stack"), add_layer)
print(paste("Este es el bioma ", shapes_names[i]))
get_biome <- get(paste0(shapes_names[i], "_stack"))
plot(get_biome)
} else {
print("cargando capas")
}
}}
plot(moistforest_ca1_stack[[1]])
plot(moistforest_yp_stack[[1]])
# Extract values
extract.area_table <- c()
# Extract values
extract.area_table <- c()
for (i in seq_along(shapes_names)) {
# Stack for each area
area_stack <-  paste0(shapes_names[i], "_stack")
print(paste0(shapes_names[i], "_stack"))
area_stack_get <- get(area_stack)
# Extract COORDINATES
coordinates_area <- xyFromCell(area_stack_get, 1:ncell(area_stack_get))
coordinates_area_df <- as.data.frame(coordinates_area)
# make object a spatial points
sp.geog.area <- SpatialPoints(coordinates_area_df)
proj4string(sp.geog.area) <- CRS.new
#Extract values
extract.vals.area <- raster::extract (area_stack_get, sp.geog.area)
extract.area_table <- cbind(coordinates_area_df, extract.vals.area)
names(extract.area_table) <- c("Longitude", "Latitude", names(moistforest_yp_stack))
# paste the extracted values to dataframe
assign(paste0(shapes_names[i], "_extract"), extract.area_table)
}
# objects
paste0(shapes_names[i], "_extract")
dryforest_antillas_extract
#dryforest_antillas_extract
get(paste0(shapes_names[i], "_extract"))
# Merge tables
for (i in seq_along(shapes_names)) {
coordinates_area_extract <- paste0(shapes_names[i], "_extract")
coordinates_area_extract_get <- get(coordinates_area_extract)
#Select 10 thousand at random
extract.vals.area_val <- na.omit(coordinates_area_extract_get)
if (nrow(extract.vals.area_val) < 10000) {
print("cool")
print(nrow(extract.vals.area_val))
assign(paste0(shapes_names[i], "_extract_table"), extract.vals.area_val)
} else {
random_coordinates <- extract.vals.area_val[sample(nrow(extract.vals.area_val), 10000), ]
print(nrow(extract.vals.area_val))
assign(paste0(shapes_names[i], "_extract_table"), random_coordinates)
}}
# Merge all tables
table_ecos <- c()
# Final table ecos
for (i in seq_along(shapes_names)) {
extract_table <- get(paste0(shapes_names[i], "_extract_table"))
extract_table <- extract_table[1:8]
extract_table$id <- NA
extract_table$id <- paste0(shapes_names[i])
table_ecos <- rbind(table_ecos, extract_table)
}
Table master
# Table master
table_ecos
# FIGURE plot
library(factoextra)
library(ggfortify)
library(ggplot2)
names_ecosystems <- c(
"Dry-forest Antilles",
"Dry-forest Central-America",
"Dry-forest South-America",
"Moist-forest Antilles",
"Moist-forest Central-America",
"Moist-forest South-America",
"Moist-forest Yucatan Peninsula",
"Montane grassland South-America",
"Temperate coniferous forest",
"Temperate mixed forest",
"Tropical coniferous forest",
"Dry-forest Yucatan Peninsula")
pca_areas <- prcomp(table_ecos[ ,c(3:8)], scale = TRUE)
summary(pca_areas)
pca_areas$rotation
# Show the percentage of variances explained by each principal component.
fviz_eig(pca_areas)
iriscolors<-setNames(c("darkgreen","green4","green3",
"orange", "yellow3",
"orange3","yellow",
"skyblue","darkblue", "blue3", "lightblue",
"lightgreen"),levels(table_ecos$id))
bp <- ggplot(pca_areas$x) +
aes(PC1, PC2, color = as.factor(table_ecos$id)) +
geom_point(size = 0.1, alpha = 0.2) +
ylim(-2.5, 5) +
xlim(-5, 5) +
xlab("PC1: 52.95%")+
ylab("PC2: 22.07%") +
stat_ellipse(geom="polygon", level=0.80, alpha=0.2, lwd = 1.4) +
scale_colour_manual(name="Biome", labels = names_ecosystems, values = iriscolors)
bp
pca_areas$rotation
# For loop cuando hay que hacer lo mismo para diferentes objetos.
# Es amigo del copy - paste.
#Ejemplos
for (i in 1:10) {
print(i)
print(paste("Esta es la repeticion", i))
}
# Nested for loop
# For loop cuando hay que hacer una serie de operaciones para diferentes objetos
#Ejemplos
for (i in 1:10) {
for (j in 1:3) {
print(i, j)
print(paste("Esta es la repeticion", i))
}
}
# Nested for loop
# For loop cuando hay que hacer una serie de operaciones para diferentes objetos
#Ejemplos
for (i in 1:10) {
for (j in 1:3) {
print(i, j)
print(paste("Esta es la repeticion", j))
}
}
print(i)
# Nested for loop
# For loop cuando hay que hacer una serie de operaciones para diferentes objetos
#Ejemplos
for (i in 1:10) {
for (j in 1:3) {
print(i)
print(paste("Esta es la repeticion", j))
print(paste("Esta es la repeticion", i))
}
}
# Nested for loop
# For loop cuando hay que hacer una serie de operaciones para diferentes objetos
#Ejemplos
for (i in 1:10) {
for (j in 1:3) {
print(i)
print(paste("Esta es la repeticion", j))
}
}
library(terra )
